"-------------------------
" Start Lightline Settings.
"-------------------------
let g:lightline = {
      \ 'colorscheme': 'solarized_light',
      \ 'active': {
      \ 'left': [ [ 'mode' ],
      \   [ 'fugitive' ],
      \   [ 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&readonly?"|":""}',
      \ },
      \ 'component_function': {
      \   'fugitive': 'MyFugitive',
      \ },
      \ }
function! MyFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head') && strlen(fugitive#head())
      return '* ' . fugitive#head()
    endif
  catch
  endtry
  return ''
endfunction
"-------------------------
" End Lightline Settings.
"-------------------------
"-------------------------
" Start Nerdtree Settings.
"-------------------------
nmap <silent> nd :NERDTreeToggle<Enter>
" 隠しファイルをデフォルトで表示させる
let NERDTreeShowHidden = 1
"-------------------------
" End Nerdtree Settings.
"-------------------------
"-------------------------
" Start IndentGuides Settings.
"-------------------------
" vimを立ち上げたときに、自動的にvim-indent-guidesをオンにする
let g:indent_guides_enable_on_vim_startup = 1
"-------------------------
" End IndentGuides Settings.
"-------------------------
"-------------------------
" Start Neovomplete Settings.
"-------------------------
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : ''
    \ }

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()
"-------------------------
" End Neovomplete Settings.
"-------------------------
"-------------------------
" End neosnippet Settings.
"-------------------------
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

 " SuperTab like snippets behavior.
 imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
 \ "\<Plug>(neosnippet_expand_or_jump)"
 \: pumvisible() ? "\<C-n>" : "\<TAB>"
 smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
 \ "\<Plug>(neosnippet_expand_or_jump)"
 \: "\<TAB>"

  " For snippet_complete marker.
  if has('conceal')
    set conceallevel=2 concealcursor=i
  endif
"-------------------------
" End Neovomplete Settings.
"-------------------------
"-------------------------
" Start EasyMotion Settings.
"-------------------------
let g:EasyMotion_do_mapping = 0
nmap s <Plug>(easymotion-s2)
xmap s <Plug>(easymotion-s2)
omap z <Plug>(easymotion-s2)
nmap g/ <Plug>(easymotion-sn)
xmap g/ <Plug>(easymotion-sn)
omap g/ <Plug>(easymotion-tn)
let g:EasyMotion_smartcase = 1
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
let g:EasyMotion_startofline = 0
let g:EasyMotion_keys = 'QZASDFGHJKL;'
let g:EasyMotion_use_upper = 1
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1
hi EasyMotionTarget guifg=#80a0ff ctermfg=81
"-------------------------
" End EasyMotion Settings.
"-------------------------
"-------------------------
" Start Yegappan Settings.
"-------------------------
nnoremap <Space><Space> :MRU<CR>
"-------------------------
" End Yegappan Settings.
"-------------------------
"-------------------------
" Start Taglist Settings.
"-------------------------
nmap <silent> tl :TlistToggle<Enter>
let Tlist_Use_Right_Window = 1  " 右側でtaglistのウィンドーを表示
let Tlist_Exit_OnlyWindow = 1   " taglistのウィンドーが最後のウィンドーならばVimを閉じる
" let Tlist_Auto_Open = 1         " 自動表示
let Tlist_Auto_Update = 1       " 自動更新
"-------------------------
" End Taglist Settings.
"-------------------------
"-------------------------
" Start QuickRun Settings.
"-------------------------
nmap <silent> qr :QuickRun -hook/time/enable 1<Enter>
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
let g:quickrun_config = {}
let g:quickrun_config['markdown'] = {
      \   'outputter': 'browser'
      \ }
"-------------------------
" End QuickRun Settings.
"-------------------------
"-------------------------
" Start IndentLine Settings.
"-------------------------
nnoremap <silent> <Space>il :<C-u>IndentLinesToggle<Enter>
set list listchars=tab:\¦\
"-------------------------
" End Indentline Settings.
"-------------------------
"-------------------------
" Start Align Settings.
"-------------------------
" Alignを日本語環境で使用するための設定
let g:Align_xstrlen = 3
"-------------------------
" End Align Settings.
"-------------------------
